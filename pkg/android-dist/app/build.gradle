apply from: '../pos-android/app/build.gradle'

android {
    def packageJson = file('../../../package.json')
    def parsedJson = new groovy.json.JsonSlurper().parseText(packageJson.text)
    defaultConfig {
        applicationId "io.gigasource.pos"
        versionCode 1
        versionName parsedJson.version
    }
    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
        debug {
            storeFile file("release.keystore")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "giga"

    productFlavors {
        dev {
            dimension "giga"
            buildConfigField("String", "mode", '"--mode=android-local-server"')
            buildConfigField("String", "androidWebshop", "\"--androidWebshop=http://${localIP}:8888\"")
        }
        pro {
            dimension "giga"
            buildConfigField("String", "mode", '"--mode=android"')
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['../pos-android/app/src/main/java']
            assets.srcDirs = ['../pos-android/app/src/main/assets', '../app/src/main/assets']
            res.srcDirs = ['../pos-android/app/src/main/res']
        }
    }
}

import org.gradle.internal.os.OperatingSystem;

android.applicationVariants.all { variant ->
    task("addPatchToApk${variant.name.capitalize()}", dependsOn: "tinkerPatch${variant.name.capitalize()}") {
        doLast {
            try {
                try {
                    exec {
                        commandLine 'apktool', '-version'
                        ignoreExitValue = true
                    }
                } catch (Exception e) {
                    logger.warn("Coudn't find apktool. Try to download apktool");
                    exec {
                        commandLine 'chmod', '+x', './download-apktool.sh'
                    }
                    exec {
                        commandLine './download-apktool.sh'
                    }
                }
                exec {
                    commandLine 'rm', '-rf', '../originalBuild/app'
                }
                exec {
                    commandLine 'apktool', 'd', '-r', '-s', '-o', '../originalBuild/app', '../originalBuild/app.apk'
                }
                exec {
                    commandLine 'mkdir', '../originalBuild/app/assets/appAssets/patch'
                }
                exec {
                    commandLine 'cp', "./build/outputs/apk/${variant.dirName.split('/')[0]}/tinkerPatch/${variant.dirName}/patch_signed_7zip.apk", "../originalBuild/app/assets/appAssets/patch/"
                }
                exec {
                    commandLine 'rm', '-rf', '../originalBuild/app-release-unsigned.apk'
                }
                exec {
                    commandLine 'apktool', 'b', '../originalBuild/app', '-o', '../originalBuild/app-release-unsigned.apk'
                }
                exec {
                    commandLine 'jarsigner', '-verbose', '-sigalg', 'SHA1withRSA', '-digestalg', 'SHA1', '-keystore', 'release.keystore', '-storepass', '123456', '../originalBuild/app-release-unsigned.apk', 'key0'
                }
                exec {
                    commandLine 'mv', '../originalBuild/app-release-unsigned.apk', '../originalBuild/pos-restaurant.apk'
                }
            } catch (Exception e) {
                throw new GradleScriptException("Something went wrong when adding patch to apk", e);
            }
        }
    }
    task("uploadApkAndPatch${variant.name.capitalize()}") {
        doLast {
            def flag = ""
            if (variant.getName().contains("dev")) {
                flag += " --mode=android-local-server"
                flag += " --androidWebshop=http://${localIP}:8888"
            } else if (variant.getName().contains("pro")) {
                flag += "--mode=android"
            }
            println flag
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    commandLine "node", '../../getConfig.js'
                    args(flag.split(' '))
                    standardOutput = os
                    ignoreExitValue = true
                }
                println 'Uploading'
                println os.toString()
                exec {
                    commandLine "node", '../../uploadNewVersionAndPatch.js', "--domain=${os.toString().replace('\n', '')}"
                    ignoreExitValue = true
                }
            }
        }
    }
}
