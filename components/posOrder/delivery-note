// inject service
injectService: [
  'OrderStore:(
        selectedCustomer,
        orderType,
        createCallInOrder,
         createCustomer,
         updateCustomer,
         calls,
         missedCalls,
         currentOrder,
         paymentTotal,
           resetOrderData,
            addProductToOrder,
            removeProductModifier,
            addItemQuantity,
            removeItemQuantity',

  'PosStore:(isIOS, user, storeLocale)'
],


//////////
// data
return {
  favorites: [],
  selectedAddress: 0,
  name: '',
  phone: '',
  address: '',
  zipcode: '',
  street: '',
  house: '',
  city: '',
  dialog: {
    input: false,
    order: false,
    choice: false,
    note: false,
  },
  dialogMode: 'add',
  products: [],
  selectedProduct: null,
  modifiers: [],
  type: '',
  note: '',
  time: 30,
  isNewCustomer: false,
  enterPressed: 0,
  autocompleteAddresses: [],
  debouceSearchAddress: () => {
  },
  token: '',
  placeId: '',
  debouceUpdatePrice: () => {
  },
  quantity: 1,
  showKeyboard: false,
  keyboardConfig: [],
  menuMissed: false,
  missedIndex: null,
  deliveryOrderMode: 'tablet',
  //inject
  paymentTotal: 0,
  currentOrder: null,
  user: {},
  storeLocale: 'en',
  isIOS: null,
  orderType: null,
  calls: [],
  missedCalls: [],
  selectedCustomer: null,
}

// code
const setting = await cms.getModel('PosSetting').findOne()
this.deliveryOrderMode = setting['generalSetting'].deliveryOrderMode || 'tablet'

//
async loadProduct() {
  this.products = (await cms.getModel('Product').find({type: 'delivery'})).map(p => ({
    ...p,
    text: `${p.id}. ${p.name}`
  }))
  this.favorites = this.products.filter(p => p.option.favorite)
},

//
async loadKeyboard() {
  const setting = await cms.getModel('PosSetting').findOne()
  this.keyboardConfig = setting && setting['keyboardDeliveryConfig']
},

//
cms.socket.emit('searchPlace'

//
cms.socket.emit('getPlaceDetail'

//
cms.socket.emit('getZipcode'

//


//
async updatePrice(price) {
  const index = this.products.findIndex(p => p._id === this.selectedProduct._id)
  await cms.getModel('Product').findOneAndUpdate({
    _id: this.selectedProduct._id
  }, {
    price
  })
  await this.loadProduct()
  this.selectedProduct = this.products[index]
},



// TODO:
// 0. fill du lieu mock data (vi du cuoc dien thoai goi den, google api key -> hien auto complete cho)
// 1. snapshot customer UI
// 2. logic test customer UI
// 3.
